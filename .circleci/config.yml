version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.16

jobs:
  build:
    docker:
      - image: circleci/python:3.7.2

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install pip setuptools --upgrade
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Build
          command: |
            . venv/bin/activate
            mkdir -p site/carnival
            mkdir -p site/codecamp
            python compile.py
            zip -r /tmp/html.zip site

      - save_cache:
          paths:
            - ./site
          key: html-{{ .Environment.CIRCLE_SHA1 }}

      - store_artifacts:
          path: /tmp/html.zip

      - store_artifacts:
          path: site

  deploy_dev:
    executor:
      name: aws-cli/default
      python-version: '3.7.2'

    steps:
      - aws-cli/setup

      - restore_cache:
          keys:
            - html-{{ .Environment.CIRCLE_SHA1 }}

      - deploy:
          name: Deploy to AWS S3
          command: |
            aws s3 sync site s3://pennylane.ai-dev

  deploy_prod:
    executor:
      name: aws-cli/default
      python-version: '3.7.2'

    steps:
      - aws-cli/setup

      - restore_cache:
          keys:
            - html-{{ .Environment.CIRCLE_SHA1 }}

      - deploy:
          name: Deploy to AWS S3
          command: |
            aws s3 sync site s3://pennylane.ai-prod

      # - run:
      #     name: Invalidate CloudFront
      #     command: aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths /qml/*

workflows:
  version: 2

  build_deploy:
    jobs:
      - build

      - deploy_prod:
          context: aws
          requires:
            - build
          filters:
            branches:
              only: master

      - deploy_dev:
          context: aws
          requires:
            - build
          filters:
            branches:
              only: dev
